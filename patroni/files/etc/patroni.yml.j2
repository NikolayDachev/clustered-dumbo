{%- import_yaml './defaults.sls' as default_settings %}
{%- set pillar_postgresql = salt['patroni_helpers.pillar_postgresql'](default_settings=default_settings) %}
{%- set pillar_patroni    = salt['patroni_helpers.pillar_patroni'](default_settings=default_settings) %}

{%-   set bootstrap_method = 'pgbackrest' %}
{%- if pillar_patroni.initialize_cluster %}
{%-   set bootstrap_method = 'initdb' %}
{%- endif %}
# better names for those 2 settings are
# teamname
scope: {{ pillar_patroni.config.scope }}
# datacenter
namespace: /{{ pillar_patroni.config.namespace }}/
# hostname
name: {{ grains.id }}

{%- set cacert = salt['patroni_helpers.cacert']('patroni') %}

restapi:
  listen:          {{ own_cluster_ip_address }}:8008
  connect_address: {{ own_cluster_ip_address }}:8008
  keyfile:         {{ pillar_patroni.config.cert }}
  certfile:        {{ pillar_patroni.config.cert }}
  cafile:          {{ cacert }}
  verify_client:   required
  authentication:
    username: {{ pillar_patroni.config.restapi.username }}
    password: {{ pillar_patroni.config.restapi.password }}

{%- if pillar_patroni.config.dcs == 'etcd' %}
etcd3:
  key:    {{ pillar_patroni.config.cert }}
  cert:   {{ pillar_patroni.config.cert }}
  cacert: {{ cacert }}
  protocol: https
  hosts:
   {%- for address in etcd_hosts %}
   - {{ address }}
  {%- endfor %}
{%- endif %}

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10

    # find out what it does
    # could mean how much data you would lose if you switchover
    maximum_lag_on_failover: 1048576
    synchronous_mode: True
    # # if we remove this section with patronictl edit-config it will start a leader selection
    # # https://patroni.readthedocs.io/en/latest/replica_bootstrap.html
    {% if 'is_standby' in pillar_patroni.config and pillar_patroni.config.is_standby %}
    standby_cluster:
      host: {{ pillar_patroni.config.standby_primary }}
      port: 5432
      restore_command: '/usr/bin/pgbackrest --stanza={{ pgbackrest_stanza }} archive-get %f "%p"'
      # this needs to be manually created
      primary_slot_name: patroni_standby
      # in theory we can use the same fallthrough as in the postgresql section below
      create_replica_methods:
      - pgbackrest
      - basebackup
    {% endif %}
    postgresql:
      # https://www.postgresql.org/docs/14/app-pgrewind.html
      use_pg_rewind: true
      use_slots: true
      use_unix_socket: true
      use_unix_socket_repl: true
      parameters:
        {%- for parameter, value in pg_settings.items() %}
        {{ parameter }}: '{{ value }}'
        {%- endfor %}

  method: {{ bootstrap_method }}
  pgbackrest:
    command: /usr/bin/patroni-pgbackrest-bootstrap
    keep_existing_recovery_conf: False
    recovery_conf:
      recovery_target_timeline: latest
      restore_command: '/usr/bin/pgbackrest --stanza={{ pgbackrest_stanza }} archive-get %f "%p"'
  basebackup:
    max-rate: '100M'

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - data-checksums
  - auth: {{ postgresql_password_encryption }}
  - auth-local: peer
  - locale:     {{ postgresql_locale }}
  - lc-collate: {{ postgresql_locale }}

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
    {%- for pg_hba_entry in pg_hba %}
    - {{ pg_hba_entry }}
    {%- endfor %}

  # Some additional users users which needs to be created after initializing new cluster
  users:
    admin:
      password: admin
      options:
        - createrole
        - createdb

postgresql:
  create_replica_methods:
    - pgbackrest
    - basebackup
  pgbackrest:
    command: /usr/bin/pgbackrest --stanza={{ pgbackrest_stanza }} restore --delta --link-all
    keep_data: True
    no_params: True
  pgbackrest-bootstrap:
    command: /usr/bin/pgbackrest --stanza={{ pgbackrest_stanza }} restore --link-all
    keep_data: True
    no_params: True
  basebackup:
    - verbose
    - max-rate: '100M'
  listen: {{ own_cluster_ip_address }}:{{ postgresql_port }}
  use_unix_socket: true
  use_unix_socket_repl: true
  data_dir: {{ pillar_postgresql.data_directory }}
  authentication:
    {%- for blockname, blockdata in pillar_postgresql.authentication.items() %}
    {{ blockname }}:
      username: {{ blockdata.username }}
      password: {{ blockdata.password }}
      sslkey:   /etc/ssl/services/pg.{{ blockdata.username }}.pem
      sslcert:  /etc/ssl/services/pg.{{ blockdata.username }}.pem
      sslrootcert: {{ cacert }}
      sslmode: verify-full
    {%- endfor %}
  # this section is optional then all configuration comes from the DCS section above or needs to be done with patronictl edit-config
  # important use case: this section can be used to have per host overrides
  parameters:
    {%- for parameter, value in pg_settings.items() %}
    {{ parameter }}: '{{ value }}'
    {%- endfor %}
  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  {%- for pg_hba_entry in pg_hba %}
  - {{ pg_hba_entry }}
  {%- endfor %}

{%- if 'watchdog' in pillar_patroni and 'use' in pillar_patroni.watchdog and pillar_patroni.watchdog.use %}
watchdog:
  mode:          {{ pillar_patroni.get('watchdog:mode',           'automatic')     }}
  device:        {{ pillar_patroni.get('watchdog:device',         '/dev/watchdog') }}
  safety_margin: {{ pillar_patroni.get('watchdog:safety_margin',  5)               }}
{%- endif %}

tags:
    nofailover:    {{ pillar_patroni.get('tags:nofailover',    false) }}
    noloadbalance: {{ pillar_patroni.get('tags:noloadbalance', false) }}
    clonefrom:     {{ pillar_patroni.get('tags:clonefrom',     false) }}
    nosync:        {{ pillar_patroni.get('tags:nosync',        false) }}